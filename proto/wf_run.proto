// Timer-related stuff
syntax = "proto3";
package lh_proto;

option go_package = ".;model";
option java_multiple_files = true;
option java_package = "io.littlehorse.common.proto";

import "status.proto";
import "variable.proto";
import "google/protobuf/timestamp.proto";

message WfRunPb {
    // Yeah ok it's similar to WfRunStatePb but hear me out
    string id = 1;
    string wf_spec_name = 2;
    int32 wf_spec_version = 3;
    LHStatusPb status = 4;

    int64 last_update_offset = 5;

    google.protobuf.Timestamp start_time = 6;
    optional google.protobuf.Timestamp end_time = 7;
    repeated ThreadRunPb thread_runs = 8;

    repeated PendingInterruptPb pending_interrupts = 9;
    repeated PendingFailureHandlerPb pending_failures = 10;
}

/*
Ideally, we would put all the info about the thread result in the ExitRun.
However, we need to account for the fact that an Exception can be thrown, or
we can reach some unexpected failure (eg. TASK_FAILURE, VAR_SUB_ERROR, etc) in
the middle of the TreadRun, so we can't necessarily put the thread result in
the ExitRun.

We want exception handlers to be able to figure out the reason that a ThreadRun
failed in order to be able to do appropriate interaction. What we need:
 - Determine the type of failure
   - Technical failure of Business failure?
   - Task failure or Timeout?
   - Variable substitution logic failure?
 - Pass any other necessary information needed, such as 
*/
message ThreadResultPb {

}

message ThreadRunPb {
    string wf_run_id = 1;
    int32 number = 2;

    LHStatusPb status = 3;
    string wf_spec_name = 4;
    int32 wf_spec_version = 5;
    string thread_spec_name = 6;

    google.protobuf.Timestamp start_time = 7;
    optional google.protobuf.Timestamp end_time = 8;

    optional string error_message = 9;
    optional TaskResultCodePb result_code = 10;

    repeated int32 child_thread_ids = 11;
    optional int32 parent_thread_id = 12;

    repeated ThreadHaltReasonPb halt_reasons = 13;
    optional string interrupt_trigger_id = 14;
    optional FailureBeingHandledPb failure_being_handled = 15;

    int32 current_node_position = 16;
}

message FailureBeingHandledPb {
    int32 thread_run_number = 1;
    int32 node_run_position = 2;
    int32 failure_number = 3;
}

message PendingInterruptPb {
    string external_event_id = 1;
    string handler_spec_name = 2;
    int32 interrupted_thread_id = 3;
}

message PendingFailureHandlerPb {
    int32 failed_thread_run = 1;
    string handler_spec_name = 2;
}

message PendingInterruptHaltReasonPb {
    string external_event_id = 1;
}

message PendingFailureHandlerHaltReasonPb {
    int32 node_run_position = 1;
}

message HandlingFailureHaltReasonPb {
    int32 handler_thread_id = 1;
}

message ParentHaltedPb {
    int32 parent_thread_id = 1;
}

message InterruptedPb {
    int32 interrupt_thread_id = 1;
}

message ManualHaltPb {
    // Nothing to store.
    bool meaning_of_life = 137;
}

message ThreadHaltReasonPb {
    oneof reason {
        ParentHaltedPb parent_halted = 1;
        InterruptedPb interrupted = 2;
        PendingInterruptHaltReasonPb pending_interrupt = 3;
        PendingFailureHandlerHaltReasonPb pending_failure = 4;
        HandlingFailureHaltReasonPb handling_failure = 5;
        ManualHaltPb manual_halt = 6;
    }
}

message NodeRunPb {
    string wf_run_id = 1;
    int32 thread_run_number = 2;
    int32 position = 3;

    int32 attempt_number = 4;
    int32 number = 5;
    LHStatusPb status = 6;

    google.protobuf.Timestamp arrival_time = 7;
    optional google.protobuf.Timestamp end_time = 8;
    string wf_spec_id = 9;
    string thread_spec_name = 10;
    string node_name = 11;

    optional TaskResultCodePb result_code = 12;
    optional string error_message = 13;

    oneof node_type {
        TaskRunPb task = 14;
        ExternalEventRunPb external_event = 15;
        EntrypointRunPb entrypoint = 16;
        ExitRunPb exit = 17;
        StartThreadRunPb start_thread = 18;
        WaitThreadRunPb wait_thread = 19;
    }

    repeated FailurePb failures = 20;
}

message FailurePb {
    string failure_name = 1;
    TaskResultCodePb failure_code = 2;
    string message = 3;
    optional VariableValuePb content = 4;
}

message TaskRunPb {
    int32 attempt_number = 1; // Task only
    optional VariableValuePb output = 2;
    optional VariableValuePb log_output = 3;

    optional google.protobuf.Timestamp start_time = 4;
    string task_def_id = 5;
    map<string, VariableValuePb> input_variables = 6;
}

message EntrypointRunPb {}

message ExitRunPb {} // Later will have info once we add threads

message StartThreadRunPb {
    optional int32 child_thread_id = 1;
    string thread_spec_name = 2;
}

message WaitThreadRunPb {
    optional google.protobuf.Timestamp thread_end_time = 1;
    optional LHStatusPb thread_status = 2;
    optional TaskResultCodePb thread_result_code = 3;
    int32 thread_run_number = 4;
}

message ExternalEventRunPb {
    string external_event_def_name = 1;
    optional google.protobuf.Timestamp event_time = 2;
    optional string external_event_id = 3;    
}

message NodeRunStatePb {
    string node_name = 1;
    int32 attempt_number = 2;
    int32 position = 3;
    int32 number = 4;
    LHStatusPb status = 5;
    optional TaskResultCodePb result_code = 6;
    optional string error_message = 7;
}
